shell脚本
	把需要的命令保存到文本中，然后执行
a.脚本分类
	bash shell
	cshell
	kshell
b.脚本文件的执行方式
	./文件名   需要文件有执行权限
	bash 文件名 不需要文件有执行权限
c.shell脚本的组成
	若干命令+脚本基本格式+特定语法==shell脚本
d.完整格式脚本
	shell脚本通常以.sh结尾
	#!/bin/bash  脚本第一行使用#!(魔法字节)指定脚本运行程序
	echo "im no.1"
	hostname
	d1.标准脚本执行方法(魔法字节指定的程序会生效)
		chmod 755 2.sh   给脚本执行权限
		./2.sh
		或者
		/root/day1/2.sh
	d2.非标准的执行方法(不建议)(魔法字节指定的程序不会运行)
		. ./2.sh
		或者
		source ./2.sh
		或者
		bash ./2.sh
		或者
		sh   ./2.sh
e.脚本的应用场景
	把重复的复杂的工作通过命令写成脚本，以后只通过执行脚本就可以完成工作

f.如何学习脚本
	1.尽可能记住更多命令
	2.掌握脚本的标准格式
		执行魔法字节和使用各种执行方式运行脚本
	3.掌握脚本的基本语法
		变量定义
		条件判断
		分支语句
		函数
		数组
		传参
		正则表达式
		sed、awk
g.变量的定义
	默认情况吓shell里面定义变量是不区分类型，可以给变量赋值任意类型的值
		a=123
		a='zone'
	定义变量时候左边右边不能有空格
		a =123   x
		a= 123   x
		a = 123  x
h.变量的分类
	环境变量
	用来影响程序执行过程或者执行结果，一般环境变量习惯用大写来定义
	查看当前终端(shell)吓哪些已经定义了环境变量
		env
	定义环境变量
		临时代表某个环境变量的执行
	系统变量
	shell本身已经固定好了名字和作用
	$1,$2....$@,$*....
	!$   上一次操作的最后一个参数
	$1   文件后跟的第一个参数
	$2   文件后跟的第二个参数

i.变量的赋值
	a=123
	b='help me'
	使用变量保存命令的执行结果``
	kernel=`uname -a `
	反引号可以把引号中命令先执行，取出结果，再把结果赋值给变量
	kernel2=$(uname -a)
	双引号是弱引号，引号内的变量可以正常使用
	单引号是强引号，引号里面所有内容都当成普通字符串处理
k.简单的四则运算
	算术运算
	默认情况下，shell只能支持简单的整数运算
	+ - * \ %(取模，余数)
	a=1
	let "a+=1"  a=a+1
	let "b=a+3"
	等同于 b=`expr $a+3`
	推荐使用
	b=$(( a+3 ))
l.条件判断
	test命令 可以通过man test查看条件判断的方法
	条件判断脚本使用if关键字
	语法结构
	------------------
	if [ 判断条件 ];then
		命令
	fi
	------------------
	if [ 判断条件 ];then
		命令
	else
		命令
	fi
	------------------
	if [ 判断条件 ];then
		命令
	elif [ 判断条件 ];then
		命令
	else
		命令
	fi
	-------------------
	if [ 判断条件 ];then
		命令
		if [ 判断条件 ];then
			命令
		fi
	else
		命令
	fi
	------------------
	必须要掌握的一些参数
		-f 文件存在并且是普通文件
			test -f /etc/inittab   条件成立，返回码$?=0
			test -f /etc           条件不成立，返回码非0
			[ -f /etc/initta ]
			[ -f /etc ]
		-d 文件存在并且是目录
		-e 不管是文件还是目录，只要存在条件就成立
		-n 只要字符串非空就成立
		-z 字符串长度为0，就成立
		!  结果取反
		字符串的的对比 =，！= 不能用于数值大小的判断
		数值判断:-eq(相等) -ne(不等) -lt(小于) -gt(大于) -gte(大于等于)
		逻辑判断负号 -a (与，and) -o (或，or)
			[ 条件1 -a 条件2 ] 只有两个条件都成立，整个大条件才成立
			[ 条件1 -o 条件2 ] 只要其中一个城里，整个大条件成立
			
