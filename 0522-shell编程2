1.awk
	线性文本处理工具
	可以在文本数据中进行字段分割和重组
	a.获取linux的IP地址
		ifconfig eth0 |grep Mask |awk -F " " '{print $2 }'|awk -F ":" '{ print $2}'
	b.打印所有的行
		 awk -F ":" '{ print }' /etc/passwd
	c.打印第一列
		查看系统中有哪些用户
		cut -d: -f1 passwd
		awk -F ":" '{ print $1 }' passwd
	d.打印多个列
		awk -F ":" '{print $1,$3}' passwd
		awk -F ":" '{print $1":"$3}' passwd
	e.把所有ssh登录失败的记录IP打印出来
		lastb -i|grep ssh |awk '{print $3}' |uniq -c
	f.打印每行的最后一列
		$NF 最后一列
		awk -F ":" '{ print $NF}' passwd | uniq -c
		/bin/bash  	用户可以登录系统进行操作
		/sbin/nologin 用户可以在系统中运行程序，但是不能登录
	g.打印每行的字段数(每行有多少列)
		NF 列的数量
		awk -F ":" '{ print NF }' passwd
	h.运算符
		+
		-
		*
		/
		%
		++
		--
		echo | awk '{ print 2^3}'
	i.关系运算符
		&&   逻辑与
		||   逻辑或
		!    逻辑非
	j.打印行号
		简单的条件判断NR代表行号
		awk -F ":" '{ print NR,$1}' passwd
		awk -F ":" 'NR==8{ print }' passwd
		原理:虽然打印的是第八行，但是前七行awk一样读取，只是没有打印
		打印字段数量大于6的行
		awk -F ":" 'NF>6{ print }' passwd
		打印uid在30-40之间额用户名
		awk -F ":" '$3>=10&&$3<=20{ print }' passwd
		隔行打印
		awk 'NR%2==0{ print }' passwd




a.终端设置：(~/.bashrc)
登录时候显示
1.当前用户为 xxx
2.当前IP为   xxx
3.当前主机名为 xxx


echo "当前用户是:" `whoami`
echo "当前IP是: "  `ifconfig eth0 |grep Mask |awk -F " " '{print $2 }'|awk -F ":" '{ print $2}'`
echo "当前主机名是: " `hostname`


b.系统情况报告
1.内存使用率超过80% 提示内存超标
2.磁盘使用率超过80% 提示磁盘超标
	获取 / 已用容量 a 总容量 b
	磁盘使用率 c=a/b
	80%==0.8
	判断 c是否大于0.8，提示
a=free -m |grep Mem|awk '{print $2}'
b=free -m |grep Mem|awk '{print $3}'
echo "scale=2;b/a" |bc

df -h |grep /$ |awk '{print $4}' |awk -F "%" '{print $1}'
2.awk的高级应用
	awk -F ":" 'BEGIN{处理文件前代码块}{处理文件中的代码块}END{处理文件后的代码块}'
	a.输出顶部增加come on baby，输出最后增加 get out of my face
		awk -F ":" 'BEGIN{ print "come on baby"}{print }END{print "get out"}' day2/passwd
	b.打印最后一行最后一列
		awk -F ":" 'END{ print $NF }' day2/passwd
	c.打印文件所有字段总数
		awk -F ":" 'BEGIN{ count=0 }{ count+=NF }END{ print count }' passwd
	d.打印字段数大于4的总行数
		 awk -F ":" 'BEGIN{ count=0}NF>4{ count++ }END{ print count}' passwd
	e.awk代码写入到独立的文件中
		文件名:01.awk
		BEGIN{
        FS=":"
        count=0
		}
		{
		        if ( NF>4 )
		        {
		                count++
		        }
		}
		END{
		        print count
		}
		程序执行 awk -f 01.awk passwd
	f.awk的函数调用
		print(参数)      打印完毕后会自动换行
		printf(参数)     格式化打印，定义格式，转义等等
		 echo |awk '{ printf("%d--%s\n",12,"simida")}'
	g.awk的循环
		for (i=0;i<0;i++){
			printf("%d",i)
		}
		文件名02.awk
		{
		for(i=0;i<5;i++)
		{
		        printf("%d",i)
		}
		}
		END{
		        print("over")
		}
		执行程序
		echo |awk -f 02.awk
	h.倒序排列所有字段
		文件名:test.txt
		1:2:3:4
		a:b:c:d:e:f
		处理后
		4:3:2:1
		f:e:d:c:b:a
		文件名:03.awk
		BEGIN{
        FS=":"
		}
		{
		        for(i=NF;i>0;i--)
		        {
		                if ( i>1 )
		                {
		                        printf("%s:",$i)
		                }
		                else
		                {
		                        printf("%s\n",$i)
		                }
		        }
		}
		执行程序
		awk -f 03.awk test.txt
2.sed 字段编辑和字段替换
	a.删除指令d
		删除所有行 sed -e 'd' passwd
		删除第一行 sed -e '1d' passwd
		删除1到3行 sed -e '1,3d' passwd
		删除第1行和第3行 sed -e '1d;3d' passwd
		包含root关键字行都被删除 sed -e '/root/d' passwd
		删除daemon开头的所有行   sed -e '/^daemon/d' passwd
		删除以nologin结尾的行    sed -e '/nologin$/d' passwd
		删除所有空行             sed -e '/^$/d' passwd
		删除所有以#开头的或者空行 sed -e '/^#/d;/^$/d' passwd
		删除以daemon开头的行到以shutdown结尾的行  sed -e '/^daemon/,/shutdown$/d' passwd
	b.直接保存结果到源文件中
		sed -i '/^root/d' passwd
	c.打印 p
		打印所有的行    sed -n -e 'p' passwd
		打印第一行和第三行 sed -n -e '1p;3p' passwd
		打印以b开头的行  sed -n -e '/^b/p' passwd
		打印以nologin结尾的行 sed -n -e '/nologin$/p' passwd
	d.替换
		把每行找到的第一个a替换为admin
			sed -e 's/a/admin/' passwd
		把每行找到的o都替换为admin
			sed -e 's/o/admin/g' passwd
		替换1-3行内容
			sed -e '1,3s/:/-/g' passwd
	e.使用域的方法进行定位
		 echo "03-23-2020" |awk -F "-" '{ print $3"-"$2"-"$1}'
		 echo "03-23-2020"|sed -r 's/(..)-(..)-(....)/\3-\1-\2/'
		 echo "come on,baby" | sed -r 's/(.*),(.*)/\2\1/'
		删除每行的第二个字符
		head -3 /etc/fstab |sed -r 's/(.)(.)(.*)/\1\3/'
		删除每行最后一个字符
		echo "can you see me?" |sed -r 's/(.*)(.)/\1/'

==============================================================
a.OSI参考模型（7层）
	物联网传话表应用
	物理层       设备的比特流传输     网卡
	数据链路层    mac地址进行媒介访问 交换机  (arp欺骗)[同网段IP可以通信]
	网络层       提供逻辑寻址         路由器 [不同网段IP进行通信]
	传输层       提供可靠和不可靠的传输  TCP/UDP 
	会话层       对应会话的管理和同步    操作系统、应用读取
	表示层       数据的表现形式，加密等  ACII、JPEG
	应用层       数据接口               http、telnet
b.TCP/IP 4层参考模型
	网络接口层(物理层、数据链路层)
	互联网层 
	传输层
	引用层(应用、表示、会话)
c.OSI和TCP/IP区别
	相同点
		都是以协议栈为基础
		彼此之间相互独立
		下层为上层提供服务
	不同点
		OSI是先有模型，tcp/ip是先有协议后有模型
		OSI适用于各种协议，tcp/ip只适合tcp/ip网络
		层次数量不一样
d.传输层
	tcp(传输控制协议)
		面向连接的服务
			建立连接再传输数据，再断开
			数据再传输中不包含目的地址
			保证数据传输的可靠性
	udp(用户数据报协议)
		面向无连接的服务
			不需要事先建立连接
			每个报文带有完整的目的地址
			不保证数据传输的可靠性
e.TCP连接的3次握手和tcp断开连接的4次握手
	tcp连接的3次握手
		1.主机a发送同步信号给主机b，我能和你通信么？
		2.主机b发送同意信号给主机a，同事发送同步信号给主机b，你可以和我通信，我可以和你通信么？
		3.主机a发送同意信号给主机b，可以
	tcp断开连接的4次握手
		1.主机a发送信号给主机b，我要结束链接
		2.主机b发送信号给主机a，当然可以
		3.主机b发送信号给主机a，终止
		4.主机a发送信号给主机b，终止
f.IP地址
	IP(网络间协议)
	IP地址通常是32位的二进制数字，被分为4组8个2进制数字
	192.168.5.48    IP地址
	255.255.255.0   子网掩码
	192.168.5.255   广播地址(不能用)
	192.168.5.0     网络号(不能用)
	IP地址乐行
	A类:10.0.0.0-10.255.255.255
	B类:172.16.0.0-172.31.255.255
	C类:192.168.0.0-192.168.255.255
	IP地址的计算方法
	1.将IP地址转换为二进制
	2.将二进制进行与运算，得到网络地址(2个1才是1)
	192     168    5      58
	255     255    254    0
	-------------------------------------------
	1100 0000.1010 1000.0000 0101.0011 1010
	1111 1111.1111 1111.1111 1110.0000 0000
	-------------------------------------------
	1100 0000.1010 1000.0000 0100.0000 0000
	192        168         4        0         网络号














